generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  username     String
  password     String
  email        String    @unique
  streams      Stream[]  @relation("userStreams")
  upvotes      Upvotes[]
  hostedSpaces Space[]   @relation("hostedBy")
}

model Stream {
  id          Int            @id @default(autoincrement())
  active      Boolean        @default(true)
  url         String
  type        StreamType
  extractedId String
  bigImage    String
  smallImage  String
  userId      Int
  createdAt   DateTime       @default(now())
  user        User           @relation("userStreams", fields: [userId], references: [id])
  upvotes     Upvotes[]
  current     CurrentStream?
  spaceId     Int?
  space       Space?         @relation("spaceStreams", fields: [spaceId], references: [id], onDelete: Cascade)
}

model Upvotes {
  id       Int    @id @default(autoincrement())
  userId   Int
  streamId Int
  user     User   @relation(fields: [userId], references: [id])
  stream   Stream @relation(fields: [streamId], references: [id])

  @@unique([userId, streamId])
}

model CurrentStream {
  id       Int    @id @default(autoincrement())
  userId   Int
  streamId Int    @unique
  stream   Stream @relation(fields: [streamId], references: [id])
  spaceId  Int?   @unique
  space    Space? @relation(fields: [spaceId], references: [id], onDelete: Cascade)
}

model Space {
  id            Int            @id @default(autoincrement())
  name          String
  streams       Stream[]       @relation("spaceStreams")
  hostId        Int
  host          User           @relation("hostedBy", fields: [hostId], references: [id])
  isActive      Boolean        @default(true)
  description   String         @default("here is my space")
  currentStream CurrentStream?
}

enum StreamType {
  spotify
  youtube
}

enum Role {
  Streamer
  EndUser
}
